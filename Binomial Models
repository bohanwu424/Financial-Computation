import numpy as np


def binomial_model(N, S0, u, r, K)

    """
    N = number of binomial iterations
    S0 = initial stock price
    u = factor change of upstate
    r = risk free interest rate per annum
    K = strike price
    """
    d = -u
    p = (1 + r - d)/(u -d)
    q = (u - 1 - r)/(u -d)
    # make stock price tree
    stock = np.zeros([N + 1, N + 1])
    for i in range(N + 1):
        for j in range(i + 1):
            stock[j, i] = S0 * (u ** (i - j)) / (d * *j)

    # Generate option prices recursively
    option = np.zeros([N + 1, N + 1])
    option[:, N] = np.maximum(np.zeros(N + 1), (stock[:, N] - K))
    for i in range(N - 1, -1, -1):
        for j in range(0, i + 1):
            option[j, i] = (
                1 / (1 + r) * (p * option[j, i + 1] + q * option[j + 1, i + 1])
            )
    return option


#Exercise 1.9:
if __name__ == "__main__":
    print("Calculating example option price at time 0:")
    op_price = binomial_model(5, 80, 10, 0, 80,1/2,1/2)
    print(op_price[0,0])

#(For fun): when interest rate is 0.01
if __name__ == "__main__":
    print("Calculating example option price at time 0:")
    op_price = binomial_model(5, 80, 10, 0.01, 80,1/2,1/2)
    print(op_price[0,0])
